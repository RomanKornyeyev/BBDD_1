/*1.	Obtener la longitud de la circunferencia introduciendo el radio por teclado cuyo valor es en cm
y el resultado lo queremos en metros.*/
/*BLOQUE*/
BEGIN
	DBMS_OUTPUT.PUT_LINE(&RADIO *2*3.14/1000);
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE LONGITUD_CIRCUNFERENCIA(RADIO NUMBER)
IS
BEGIN
	DBMS_OUTPUT.PUT_LINE(RADIO *2*3.14/1000);
END;
/
EXECUTE LONGITUD_CIRCUNFERENCIA(20);


/*2.	Obtener el salario del empleado 7839 de la tabla EMPLE.*/
/*BLOQUE*/
DECLARE
	V_SAL EMPLE.SALARIO%TYPE;
BEGIN
	SELECT SALARIO INTO V_SAL FROM EMPLE WHERE EMP_NO=7839;
	DBMS_OUTPUT.PUT_LINE(V_SAL);
END;
/
/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE OBTENERSALARIO(NUM_EMP NUMBER)
IS
	V_SAL EMPLE.SALARIO%TYPE;
BEGIN
	SELECT SALARIO INTO V_SAL FROM EMPLE WHERE EMP_NO=NUM_EMP;
	DBMS_OUTPUT.PUT_LINE(V_SAL);
END;
/
EXECUTE OBTENERSALARIO(7839);


/*3.	Mostrar el nombre de la asignatura con código 7 de la tabla ASIGNATURAS.*/
/*BLOQUE*/
DECLARE
	V_NOMBRE ASIGNATURAS.NOMBRE%TYPE;
BEGIN
	SELECT NOMBRE INTO V_NOMBRE FROM ASIGNATURAS WHERE COD=7;
	DBMS_OUTPUT.PUT_LINE(V_NOMBRE);
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE OBTENERASIGNATURA
IS
	V_NOMBRE ASIGNATURAS.NOMBRE%TYPE;
BEGIN
	SELECT NOMBRE INTO V_NOMBRE FROM ASIGNATURAS WHERE COD=7;
	DBMS_OUTPUT.PUT_LINE(V_NOMBRE);
END;
/

EXECUTE OBTENERASIGNATURA;


/*4.	Visualizar el nombre de la tabla PROFESORES, introduciendo el DNI por teclado
a través de una variable de sustitución.*/
/*BLOQUE*/
DECLARE
	V_NOM PROFESORES.APELLIDOS%TYPE;
BEGIN
	SELECT APELLIDOS INTO V_NOM FROM PROFESORES WHERE DNI=&INTRODUCIDO;
	DBMS_OUTPUT.PUT_LINE(V_NOM);
END;
/
4123005

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE OBTENERNOMBRE(V_DNI NUMBER)
IS
	V_NOM PROFESORES.APELLIDOS%TYPE;
BEGIN
	SELECT APELLIDOS INTO V_NOM FROM PROFESORES WHERE DNI=V_DNI;
	DBMS_OUTPUT.PUT_LINE(V_NOM);
END;
/
EXECUTE OBTENERNOMBRE(4123005);

/*5.	A través de variables visualice el departamento VENTAS de la tabla DEPART con
el siguiente mensaje ‘El departamento nº X esta en XXX’.*/
/*BLOQUE*/
DECLARE
	V_NUM DEPART.DEPT_NO%TYPE;
	V_LOC DEPART.LOC%TYPE;
BEGIN
	SELECT DEPT_NO, LOC INTO V_NUM, V_LOC FROM DEPART WHERE DNOMBRE='VENTAS';
	DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO Nº '||V_NUM||' ESTÁ EN '||V_LOC);
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE VISUALIZAR_VENTAS(NOM VARCHAR)
IS
	V_NUM DEPART.DEPT_NO%TYPE;
	V_LOC DEPART.LOC%TYPE;
BEGIN
	SELECT DEPT_NO, LOC INTO V_NUM, V_LOC FROM DEPART WHERE DNOMBRE=NOM;
	DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO Nº '||V_NUM||' ESTÁ EN '||V_LOC);
END;
/
EXECUTE VISUALIZAR_VENTAS('VENTAS');


/*6.	Insertar en la tabla EMPLE un empleado con código 9999 asignado directamente
en la variable, apellido ‘PEREZ’, oficio ‘ANALISTA’ y código del departamento al que pertenece 10.*/
/*BLOQUE*/
DECLARE
	V_EMPNO NUMBER(4) := 9999;
	V_APE VARCHAR(20) := 'PEREZ';
	V_OFI VARCHAR(20) := 'ANALISTA';
	V_DEP NUMBER(2)   := 10;
BEGIN
	INSERT INTO EMPLE VALUES(V_EMPNO, V_APE, V_OFI, NULL, NULL, NULL, NULL, V_DEP);
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE INSERTAR(V_EMPNO NUMBER, V_APE VARCHAR, V_OFI VARCHAR, V_DEP NUMBER)
IS
BEGIN
	INSERT INTO EMPLE VALUES(V_EMPNO, V_APE, V_OFI, NULL, NULL, NULL, NULL, V_DEP);
END;
/
EXECUTE INSERTAR(9999, 'PEREZ', 'ANALISTA', 10);


/*7.	Incrementar el salario en la tabla EMPLE en 200€ a todos los trabajadores que sean ‘ANALISTAS’, mediante un bloque anónimo PL,
asignando dicho valor a una variable declarada%TYPE.*/
/* BLOQUE */
DECLARE
	V_AUMENTO NUMBER := 200;
BEGIN
	UPDATE EMPLE SET SALARIO=SALARIO+V_AUMENTO WHERE OFICIO='ANALISTA';
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE AUMENTO_SALARIO(V_AUMENTO NUMBER)
IS
BEGIN
	UPDATE EMPLE SET SALARIO=SALARIO+V_AUMENTO WHERE OFICIO='ANALISTA';
END;
/
EXECUTE AUMENTO_SALARIO(200);


/*8.	Borrar un registro de la tabla EMPLE, existiendo en el bloque una variable PL y otra de sustitución.*/
/*BLOQUE*/
DECLARE
	V_APE VARCHAR(20) := 'JIMENO';
BEGIN
	DELETE FROM EMPLE WHERE APELLIDO=V_APE AND EMP_NO=&INTRODUCIDO;
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE ELIMINAR(V_APE VARCHAR, V_EMPNO NUMBER)
IS
BEGIN
	DELETE FROM EMPLE WHERE APELLIDO=V_APE AND EMP_NO=V_EMPNO;
END;
/
EXECUTE ELIMINAR('JIMENO', 7900);


/*9.	Suprimir de la tabla ASIGNATURAS aquellos que tengan un código mayor a cinco utilizando los atributos del
cursor SQL%ROWCOUNT. Que muestre cuantas filas ha borrado. */
/*BLOQUE*/
DECLARE
BEGIN
	DELETE FROM ASIGNATURAS WHERE COD>5;
	DBMS_OUTPUT.PUT_LINE('NUMERO DE ASIGNATURAS BORRADAS: ' || TO_CHAR(SQL%ROWCOUNT));
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE CONTADOR
IS
BEGIN 
	DELETE FROM ASIGNATURAS WHERE COD>5;
	DBMS_OUTPUT.PUT_LINE('NUMERO DE ASIGNATURAS BORRADAS: ' || TO_CHAR(SQL%ROWCOUNT));
END;
/
EXECUTE CONTADOR;


/*10.	Obtener un bloque PL que introduciendo el código de un trabajador de la tabla EMPLE,
visualizar el código y su salario para posteriormente actualizarlo en función de su sueldo.
Si su sueldo es mayor de 1200 € su incremento será del 20% y su es menor del 25%. Visualizar
su sueldo actualizado.*/
/*BLOQUE*/
DECLARE
	V_EMPNO NUMBER := &INTRODUCIDO;
	V_SAL NUMBER;
BEGIN
	SELECT EMP_NO, SALARIO INTO V_EMPNO, V_SAL FROM EMPLE WHERE EMP_NO=V_EMPNO;
	IF (V_SAL >= 1200) THEN
		UPDATE EMPLE SET SALARIO=SALARIO*1.2 WHERE EMP_NO=V_EMPNO;
	ELSE
		UPDATE EMPLE SET SALARIO=SALARIO*1.25 WHERE EMP_NO=V_EMPNO;
	END IF;
	DBMS_OUTPUT.PUT_LINE('EMPLEADO: ' || V_EMPNO || ' SALARIO ACTUALIZADO: ' || V_SAL);
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE SUBIR_SUELDO(V_EMPNO NUMBER)
IS
	V_SAL NUMBER;
BEGIN
	SELECT  SALARIO INTO V_SAL FROM EMPLE WHERE EMP_NO=V_EMPNO;
	IF (V_SAL >= 1200) THEN
		UPDATE EMPLE SET SALARIO=SALARIO*1.2 WHERE EMP_NO=V_EMPNO;
	ELSE
		UPDATE EMPLE SET SALARIO=SALARIO*1.25 WHERE EMP_NO=V_EMPNO;
	END IF;
	DBMS_OUTPUT.PUT_LINE('EMPLEADO: ' || V_EMPNO || ' SALARIO ACTUALIZADO: ' || V_SAL);
END;
/
EXECUTE SUBIR_SUELDO(7900);


/*11.	Introduciendo un número por teclado, correspondiente al dorsal de un futbolista, dar como
salida el puesto en el que juega dicho jugador. Utilizar la estructura de control más adecuada.*/
/* BLOQUE */
DECLARE
	DORSAL NUMBER := &INTRODUCIDO;
	PUESTO VARCHAR(20);
BEGIN
	IF (DORSAL=1) THEN PUESTO := 'PORTERO';
	ELSIF (DORSAL=2) THEN PUESTO := 'LATERAL DERECHO';
	ELSIF (DORSAL=3) THEN PUESTO := 'LATERAL IZQUIERDO';
	ELSIF (DORSAL=4 OR DORSAL=5) THEN PUESTO := 'CENTRAL';
	ELSIF (DORSAL=6 OR DORSAL=8) THEN PUESTO := 'MEDIOCENTRO';
	ELSIF (DORSAL=7) THEN PUESTO := 'EXTREMO DERECHO';
	ELSIF (DORSAL=9) THEN PUESTO := 'DELANTERO CENTRO';
	ELSIF (DORSAL=10) THEN PUESTO := 'MEDIA PUNTA';
	ELSIF (DORSAL=11) THEN PUESTO := 'EXTREMO IZQUIERDO';
	ELSE PUESTO := 'NO EXISTE';
	END IF;
	DBMS_OUTPUT.PUT_LINE(PUESTO);
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE PUESTO_JUGADOR(DORSAL NUMBER)
IS
	PUESTO VARCHAR(20);
BEGIN
	IF (DORSAL=1) THEN PUESTO := 'PORTERO';
	ELSIF (DORSAL=2) THEN PUESTO := 'LATERAL DERECHO';
	ELSIF (DORSAL=3) THEN PUESTO := 'LATERAL IZQUIERDO';
	ELSIF (DORSAL=4 OR DORSAL=5) THEN PUESTO := 'CENTRAL';
	ELSIF (DORSAL=6 OR DORSAL=8) THEN PUESTO := 'MEDIOCENTRO';
	ELSIF (DORSAL=7) THEN PUESTO := 'EXTREMO DERECHO';
	ELSIF (DORSAL=9) THEN PUESTO := 'DELANTERO CENTRO';
	ELSIF (DORSAL=10) THEN PUESTO := 'MEDIA PUNTA';
	ELSIF (DORSAL=11) THEN PUESTO := 'EXTREMO IZQUIERDO';
	ELSE PUESTO := 'NO EXISTE';
	END IF;
	DBMS_OUTPUT.PUT_LINE(PUESTO);
END;
/
EXECUTE PUESTO_JUGADOR(2);


/*12.	Dados dos números introducidos por teclado, obtener cuál de los dos es mayor.*/
/*BLOQUE*/
DECLARE
	NUM1 NUMBER := &INTRODUCIDO1;
	NUM2 NUMBER := &INTRODUCIDO2;
	MAYOR NUMBER;
BEGIN
	IF (NUM1 > NUM2) THEN MAYOR:=NUM1;
	ELSIF (NUM2 > NUM1) THEN MAYOR:=NUM2;
	END IF;
	
	IF(NUM1=NUM2) THEN DBMS_OUTPUT.PUT_LINE('SON IGUALES');
	ELSE DBMS_OUTPUT.PUT_LINE('ENTRE LOS NUMEROS ' || NUM1 || ' Y ' || NUM2 || ', EL MAYOR ES: ' || MAYOR);
	END IF;
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE MAYOR(NUM1 NUMBER, NUM2 NUMBER)
IS
	MAYOR NUMBER;
BEGIN
	IF (NUM1 > NUM2) THEN MAYOR:=NUM1;
	ELSIF (NUM2 > NUM1) THEN MAYOR:=NUM2;
	END IF;
	
	IF(NUM1=NUM2) THEN DBMS_OUTPUT.PUT_LINE('SON IGUALES');
	ELSE DBMS_OUTPUT.PUT_LINE('ENTRE LOS NUMEROS ' || NUM1 || ' Y ' || NUM2 || ', EL MAYOR ES: ' || MAYOR);
	END IF;
END;
/
EXECUTE MAYOR(2, 5);

/*13.	Realizar un programa que devuelva el número de cifras de un número entero, introducido por teclado, mediante una variable de sustitución.*/
/*BLOQUE*/
DECLARE
	V_NUM NUMBER := &INTRODUCIDO;
	V_CIFRAS NUMBER := 0;
BEGIN
	FOR I IN 1..LENGTH(V_NUM) LOOP
		V_CIFRAS:=V_CIFRAS+1;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('CIFRAS QUE TIENE EL NUMERO ' || V_NUM ||' :' || V_CIFRAS);
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE NUM_CIFRAS(V_NUM NUMBER)
IS
	V_CIFRAS NUMBER := 0;
BEGIN
	FOR I IN 1..LENGTH(V_NUM) LOOP
		V_CIFRAS:=V_CIFRAS+1;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('CIFRAS QUE TIENE EL NUMERO ' || V_NUM ||' :' || V_CIFRAS);
END;
/
EXECUTE NUM_CIFRAS (123);


/*14.	Dado un número introducido por teclado, visualizar por pantalla todos los números iguales o
inferiores a él. Este programa se efectuará por todos los tipos de estructuras repetitivas.*/
/*BLOQUE*/
DECLARE
	NUM1 NUMBER := &INTRODUCIDO;
BEGIN
	FOR I IN REVERSE 1..NUM1 LOOP
		DBMS_OUTPUT.PUT_LINE(I);
	END LOOP;
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE NUM_RANGOS(NUM1 NUMBER)
IS
BEGIN
	FOR I IN REVERSE 1..NUM1 LOOP
		DBMS_OUTPUT.PUT_LINE(I);
	END LOOP;
END;
/
EXECUTE NUM_RANGOS (13);


/*15.	Introduciendo un año por teclado, decir si este es bisiesto o no.*/
/*BLOQUE*/
DECLARE
	ANNIO NUMBER:= &INTRODUCIDO;
BEGIN
	IF(MOD(ANNIO, 4)=0 AND MOD(ANNIO, 100)!=0) OR MOD(ANNIO, 400)=0 THEN
		DBMS_OUTPUT.PUT_LINE('EL AÑO ' || ANNIO || ' ES BISIESTO');
	ELSE
		DBMS_OUTPUT.PUT_LINE('EL AÑO ' || ANNIO || ' NO ES BISIESTO');
	END IF;
END;
/

/*PROCEDIMIENTO*/
CREATE OR REPLACE PROCEDURE BISIESTO_YEAR(ANNIO NUMBER)
IS
BEGIN
	IF(MOD(ANNIO, 4)=0 AND MOD(ANNIO, 100)!=0) OR MOD(ANNIO, 400)=0 THEN
		DBMS_OUTPUT.PUT_LINE('EL AÑO ' || ANNIO || ' ES BISIESTO');
	ELSE
		DBMS_OUTPUT.PUT_LINE('EL AÑO ' || ANNIO || ' NO ES BISIESTO');
	END IF;
END;
/
EXECUTE BISIESTO_YEAR(2000);
EXECUTE BISIESTO_YEAR(2022);