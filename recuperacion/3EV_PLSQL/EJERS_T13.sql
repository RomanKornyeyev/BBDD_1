REM ===== EJER 1 =====
REM === CON LOOP ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
DECLARE
	VNOM VARCHAR(30);
	VLOC VARCHAR(30);
	CURSOR C1 IS SELECT DNOMBRE, LOC FROM DEPART;
BEGIN
	OPEN C1;
	LOOP
		FETCH C1 INTO VNOM, VLOC;
		EXIT WHEN C1%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE(VNOM||'*'||VLOC);
	END LOOP;
	CLOSE C1;
END;
/

REM ***AL DECLARAR EL CURSOR, SELECCIONAS LAS FILAS DE UNA TABLA QUE QUIERES SELECCIONAR (Y LUEGO LAS RECORRES CON UN BUCLE)
REM ***FETCH: CARGA LAS TABLAS EN LAS VARIABLES (EN ORDEN)
REM ***EXIT WHEN C1%NOTFOUND, CUANDO ENCUENTRA "UN NULL" EN EL "ARRAY", TERMINA EL BUCLE

REM === CON WHILE ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
DECLARE
	VNOM VARCHAR(30);
	VLOC VARCHAR(30);
	CURSOR C1 IS SELECT DNOMBRE, LOC FROM DEPART;
BEGIN
	OPEN C1;
	FETCH C1 INTO VNOM, VLOC;
	WHILE C1%FOUND LOOP
		DBMS_OUTPUT.PUT_LINE(VNOM||’*’||VLOC);
		FETCH C1 INTO VNOM, VLOC;
	END LOOP;
	CLOSE C1;
END;
/

REM ***CON EL PRIMER FETCH CARGAS EL PRIMER RESULTADO DE LA TABLA PARA PODER ENTRAR EN EL WHILE (COMO UN BOOLEAN=FALSE EN JAVA)






REM ===== EJER 2 ======
REM === CON LOOP ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
DECLARE
	V_APE EMPLE.APELLIDO%TYPE;
	I NUMBER;
	CURSOR C2 IS SELECT APELLIDO FROM EMPLE WHERE DEPT_NO=20;
BEGIN
	OPEN C2;
	I:=0;
	LOOP
		I:=I+1;
		FETCH C2 INTO V_APE;
		EXIT WHEN C2%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE(I||'.'||V_APE);
	END LOOP;
	CLOSE C2;
END;
/

REM ***AL DECLARAR UNA VARIABLE, PARA ASEGURARNOS DE QUE COINCIDA CON LA LONGITUD/TIPO DE LA TABLA, PONEMOS NOMBRETABLA.NOMBREFILA%TYPE

REM === 2ª FORMA CON LOOP ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
DECLARE
	V_APE EMPLE.APELLIDO%TYPE;
	CURSOR C2 IS SELECT APELLIDO FROM EMPLE WHERE DEPT_NO=20;
BEGIN
	OPEN C2;
	LOOP
		FETCH C2 INTO V_APE;
		EXIT WHEN C2%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE(C2%ROWCOUNT||'.'||V_APE);
	END LOOP;
	CLOSE C2;
END;
/


REM === 3ª FORMA CON LOOP === EJER 3
SET SERVEROUTPUT ON;
SET VERIFY OFF;
CREATE OR REPLACE PROCEDURE VER_EMPLE_DEPART(V_DEP NUMBER)
AS
	V_APE EMPLE.APELLIDO%TYPE;
	CURSOR C3 IS SELECT APELLIDO FROM EMPLE WHERE DEPT_NO=V_DEP;
BEGIN
	OPEN C3;
	LOOP
		FETCH C3 INTO V_APE;
		EXIT WHEN C3%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE(C3%ROWCOUNT||'.'||V_APE);
	END LOOP;
	CLOSE C3;
END;
/

EXECUTE VER_EMPLE_DEPART(20);

REM ***AS/IS ES IGUAL AL DECLARE
REM ***&VAR ES UNA VARIABLE DE ACOPLAMIENTO (METER DATOS POR TECLADO)(MAYORMENTE SE HACE CON BLOQUES ANÓNIMOS)







REM ===== EJER 4 ======
REM === CON FOR LOOP ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
DECLARE
	CURSOR C4 IS SELECT APELLIDO, OFICIO, COMISION FROM EMPLE WHERE COMISION>500;
BEGIN
	FOR I IN C4 LOOP
		DBMS_OUTPUT.PUT_LINE(I.APELLIDO||'*'||I.OFICIO||'*'||I.COMISION);
	END LOOP;
END;
/

REM ***EN LOS FOR LOOP LOS CURSORES SE ABREN Y CIERRAN AUTOMÁTICAMENTE
REM ===FOR LOOP ESTÁ ROTÍSIMO, PERO EN ALGUNOS MATCHUPS ES UNA MIERDA (NO VA)









REM ===== EJER 5 ======
REM === CON FOR LOOP ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
DECLARE
	CURSOR C5 IS SELECT APELLIDO, FECHA_ALT FROM EMPLE ORDER BY FECHA_ALT DESC;
BEGIN
	FOR I IN C5 LOOP
		DBMS_OUTPUT.PUT_LINE(I.APELLIDO||'*'||I.FECHA_ALT);
	END LOOP;
END;
/







REM ==================== FUNCIONA, PERO ES UN POCO XD
REM ===== EJER 6 ======
REM ===CON FOR UPDATE===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
CREATE OR REPLACE PROCEDURE SUBIR_SUELDO_DEPART_INDICADO(V_DEP NUMBER, V_SUBIDA NUMBER)
IS
	CURSOR C6 IS SELECT SALARIO FROM EMPLE WHERE DEPT_NO=V_DEP FOR UPDATE;
	V_SALARIO NUMBER;
BEGIN
	OPEN C6;
	FETCH C6 INTO V_SALARIO;
	WHILE C6%FOUND LOOP
	UPDATE EMPLE SET SALARIO=SALARIO+V_SALARIO*V_SUBIDA/100
		WHERE CURRENT OF C6;
	DBMS_OUTPUT.PUT_LINE(V_SALARIO);
	FETCH C6 INTO V_SALARIO;
	END LOOP;
	CLOSE C6;
END;
/

EXECUTE SUBIR_SUELDO_DEPART_INDICADO(20, 20);








REM ===== EJER 7 ======
REM === CON FOR LOOP ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
CREATE OR REPLACE PROCEDURE VISUALIZAR_EMPLE_POR_APE
AS
	CURSOR C7 IS SELECT APELLIDO, FECHA_ALT FROM EMPLE ORDER BY APELLIDO;
BEGIN
	FOR I IN C7 LOOP
		DBMS_OUTPUT.PUT_LINE(I.APELLIDO||'*'||I.FECHA_ALT);
	END LOOP;
END;
/

EXECUTE VISUALIZAR_EMPLE_POR_APE();

REM ***AL CREAR EL MÉTODO, SI NO RECIBE PARÁMETROS, NO HAY QUE PONERLE LOS PARÉNTESIS







REM ===== EJER 8 ======
REM === CON FOR LOOP ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
CREATE OR REPLACE PROCEDURE VISUALIZAR_DEPT_EMPLEADOS
AS
	CURSOR C8 IS SELECT DEPT_NO, COUNT(EMP_NO) AS COSA FROM EMPLE GROUP BY DEPT_NO; 
BEGIN
	FOR I IN C8 LOOP
		DBMS_OUTPUT.PUT_LINE(I.DEPT_NO||'*'||I.COSA);
	END LOOP;
END;
/

EXECUTE VISUALIZAR_DEPT_EMPLEADOS;








REM ======================NO FUNCIONA
REM ===== EJER 9 ======
SET SERVEROUTPUT ON;
SET VERIFY OFF;
CREATE OR REPLACE PROCEDURE VISUALIZAR_5_EMPLE
AS
	CURSOR C9 IS SELECT APELLIDO, SALARIO FROM EMPLE ORDER BY SALARIO DESC;
	V_APE EMPLE.APELLIDO%TYPE;
	V_SAL EMPLE.SALARIO%TYPE;
BEGIN
	OPEN C9;
	LOOP
		FETCH C9 INTO V_APE, V_SAL;
		EXIT WHEN C9%ROWCOUNT=5;
		DBMS_OUTPUT.PUT_LINE(V_APE||'*'||V_SAL);
	END LOOP;
	CLOSE C9;
END;
/

EXECUTE VISUALIZAR_5_EMPLE;


REM === OTRA FORMA CON ROWTYPE (COGER TODOS LOS VALORES DE LA TABLA)
CREATE OR REPLACE PROCEDURE VISUALIZAR_5_EMPLE_V2
AS
	CURSOR C9 IS SELECT APELLIDO, SALARIO FROM EMPLE ORDER BY SALARIO DESC;
	V_EMPLE C10%ROWTYPE;
BEGIN
	OPEN C9;
	LOOP
		FETCH C9 INTO V_EMPLE;
		EXIT WHEN C9%ROWCOUNT=5;
		DBMS_OUTPUT.PUT_LINE(V_EMPLE.APELLIDO||'*'||V_EMPLE.SALARIO);
	END LOOP;
	CLOSE C9;
END;
/







REM ===== EJER 10 ======
REM === CON LOOP ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
CREATE OR REPLACE PROCEDURE DOS_EMPLE_OFICIO
AS
	CURSOR C10 IS SELECT * FROM EMPLE ORDER BY OFICIO, SALARIO ASC;
	CONT NUMBER := 0;
	V_OFICIO EMPLE.OFICIO%TYPE;
BEGIN
	FOR I IN C10 LOOP
		IF CONT != 2 THEN
			CONT := CONT + 1;
			V_OFICIO := I.OFICIO;
			DBMS_OUTPUT.PUT_LINE(I.APELLIDO||'*'||I.OFICIO||'*'||I.SALARIO);
		ELSIF V_OFICIO!=I.OFICIO THEN
			CONT := 0;
		END IF;
	END LOOP;
END;
/

EXECUTE DOS_EMPLE_OFICIO;













REM ===== EJER 11 ======
REM === CON FOR LOOP ===
SET SERVEROUTPUT ON;
SET VERIFY OFF;
CREATE OR REPLACE PROCEDURE MOSTRAR_11
IS
	CURSOR C11 IS SELECT * FROM EMPLE ORDER BY DEPT_NO, APELLIDO, SALARIO ASC;
	CURSOR C_AUX IS SELECT DEPT_NO FROM EMPLE ORDER BY DEPT_NO ASC;
	V_SUMA_EMPLE NUMBER DEFAULT 0;
	V_SUMA_SAL NUMBER DEFAULT 0;
	V_SUMA_SAL_TOT NUMBER DEFAULT 0;
	V_SUMA_EMPLE_TOT NUMBER DEFAULT 0;
	V_DEP NUMBER DEFAULT 0;
BEGIN
	OPEN C_AUX;
	FETCH C_AUX INTO V_DEP;
	FOR I IN C11 LOOP
		IF V_DEP = I.DEPT_NO THEN
			DBMS_OUTPUT.PUT_LINE(I.DEPT_NO||'*'||I.APELLIDO||'*'||I.OFICIO||'*'||I.SALARIO);	
		ELSE
			DBMS_OUTPUT.PUT_LINE(' === DEPT_NO:'||V_DEP||', NUM. EMPLE: '||V_SUMA_EMPLE||', SUM.SALARIOS: '||V_SUMA_SAL);
			DBMS_OUTPUT.PUT_LINE(I.DEPT_NO||'*'||I.APELLIDO||'*'||I.OFICIO||'*'||I.SALARIO);
			V_DEP:=I.DEPT_NO;
			V_SUMA_EMPLE:=0;
			V_SUMA_SAL:=0;
		END IF;
		V_SUMA_SAL:=I.SALARIO+V_SUMA_SAL;
		V_SUMA_SAL_TOT:=I.SALARIO+V_SUMA_SAL_TOT;
		V_SUMA_EMPLE:=V_SUMA_EMPLE+1;
		V_SUMA_EMPLE_TOT:=V_SUMA_EMPLE_TOT+1;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(' === DEPT_NO:'||V_DEP||', NUM. EMPLE: '||V_SUMA_EMPLE||', SUM.SALARIOS: '||V_SUMA_SAL);
	DBMS_OUTPUT.PUT_LINE(' ===== SUMA TOT. EMPLES: '||V_SUMA_EMPLE_TOT||' SUMA TOTAL SALARIOS: '||V_SUMA_SAL_TOT);
	CLOSE C_AUX;
END;
/

EXECUTE MOSTRAR_11;